'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var RNSound = require('react-native').NativeModules.RNSound;
var IsAndroid = typeof RNSound.setLooping !== 'undefined';
var nextKey = 0;

var Sound = (function () {
    function Sound(filename, basePath) {
        var _this = this;

        var onError = arguments.length <= 2 || arguments[2] === undefined ? function () {
            return false;
        } : arguments[2];
        var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

        _classCallCheck(this, Sound);

        if (IsAndroid) {
            this._filename = filename.toLowerCase().replace(/\.[^.]+$/, '');
        } else {
            this._filename = basePath ? basePath + '/' + filename : filename;
        }
        this._loaded = false;
        this._key = nextKey++;
        this._duration = -1;
        this._numberOfChannels = -1;
        this._volume = 1;
        this._pan = 0;
        this._numberOfLoops = 0;
        RNSound.prepare(this._filename, this._key, options, function (error, props) {
            if (props) {
                if (typeof props.duration === 'number') {
                    _this._duration = props.duration;
                }
                if (typeof props.numberOfChannels === 'number') {
                    _this._numberOfChannels = props.numberOfChannels;
                }
            }
            if (error === null) {
                _this._loaded = true;
            }
            if (onError) {
                onError(error);
            }
        });
    }

    _createClass(Sound, [{
        key: 'isLoaded',
        value: function isLoaded() {
            return this._loaded;
        }
    }, {
        key: 'play',
        value: function play() {
            var onEnd = arguments.length <= 0 || arguments[0] === undefined ? function () {
                return false;
            } : arguments[0];

            if (this._loaded) {
                RNSound.play(this._key, function (successfully) {
                    return onEnd(successfully);
                });
            }
            return this;
        }
    }, {
        key: 'pause',
        value: function pause() {
            if (this._loaded) {
                RNSound.pause(this._key);
            }
            return this;
        }
    }, {
        key: 'stop',
        value: function stop() {
            if (this._loaded) {
                RNSound.stop(this._key);
            }
            return this;
        }
    }, {
        key: 'release',
        value: function release() {
            if (this._loaded) {
                RNSound.release(this._key);
            }
            return this;
        }
    }, {
        key: 'getDuration',
        value: function getDuration() {
            return this._duration;
        }
    }, {
        key: 'getNumberOfChannels',
        value: function getNumberOfChannels() {
            return this._numberOfChannels;
        }
    }, {
        key: 'getVolume',
        value: function getVolume() {
            return this._volume;
        }
    }, {
        key: 'setVolume',
        value: function setVolume(value) {
            this._volume = value;
            if (this._loaded) {
                if (IsAndroid) {
                    RNSound.setVolume(this._key, value, value);
                } else {
                    RNSound.setVolume(this._key, value);
                }
            }
            return this;
        }
    }, {
        key: 'getPan',
        value: function getPan() {
            return this._pan;
        }
    }, {
        key: 'setPan',
        value: function setPan(value) {
            if (this._loaded) {
                RNSound.setPan(this._key, this._pan = value);
            }
            return this;
        }
    }, {
        key: 'getNumberOfLoops',
        value: function getNumberOfLoops() {
            return this._numberOfLoops;
        }
    }, {
        key: 'setNumberOfLoops',
        value: function setNumberOfLoops(value) {
            this._numberOfLoops = value;
            if (this._loaded) {
                if (IsAndroid) {
                    RNSound.setLooping(this._key, !!value);
                } else {
                    RNSound.setNumberOfLoops(this._key, value);
                }
            }
            return this;
        }
    }, {
        key: 'getCurrentTime',
        value: function getCurrentTime(callback) {
            if (this._loaded) {
                RNSound.getCurrentTime(this._key, callback);
            }
        }
    }, {
        key: 'setCurrentTime',
        value: function setCurrentTime(value) {
            if (this._loaded) {
                RNSound.setCurrentTime(this._key, value);
            }
            return this;
        }

        // ios only
    }, {
        key: 'setCategory',
        value: function setCategory(value) {
            RNSound.setCategory(this._key, value);
        }

        // ios only
    }, {
        key: 'setOnRemotePauseHandler',
        value: function setOnRemotePauseHandler(value) {
            var _this2 = this;

            var onRemotePause = function onRemotePause() {
                if (value) {
                    value();
                    // reset
                    RNSound.onRemotePause(_this2._key, onRemotePause);
                }
            };

            // initial set
            RNSound.onRemotePause(this._key, onRemotePause);

            return this;
        }

        // ios only
    }, {
        key: 'setOnRemotePlayHandler',
        value: function setOnRemotePlayHandler(value) {
            var _this3 = this;

            var onRemotePlay = function onRemotePlay() {
                if (value) {
                    value();
                    // reset
                    RNSound.onRemotePlay(_this3._key, onRemotePlay);
                }
            };

            // initial set
            RNSound.onRemotePlay(this._key, onRemotePlay);
            return this;
        }
    }]);

    return Sound;
})();

Sound.enable = function (enabled) {
    RNSound.enable(enabled);
};
Sound.enableInSilenceMode = function (enabled) {
    RNSound.enableInSilenceMode(enabled);
};

if (!IsAndroid) {
    Sound.enable(true);
}

Sound.MAIN_BUNDLE = RNSound.MainBundlePath;
Sound.DOCUMENT = RNSound.NSDocumentDirectory;
Sound.LIBRARY = RNSound.NSLibraryDirectory;
Sound.CACHES = RNSound.NSCachesDirectory;

module.exports = Sound;